import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Keypair, PublicKey, SystemProgram } from "@solana/web3.js";
import { TokenSwap } from "../target/types/token_swap";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
} from "@solana/spl-token";
import { bs58 } from "@coral-xyz/anchor/dist/cjs/utils/bytes";
import { assert } from "chai";

describe("token_swap", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.TokenSwap as Program<TokenSwap>;
  const wallet = provider.wallet;

  const PRIVATE_KEY_BASE58 = "2AYsnuQigNBMtssNknQRQx1abP8B6K3TYYgReqrq2LZiBCXY7uyminH2YQ5LcSpFfxYVJsasNz3QyHdW8C7mdPar";
  const PRIVATE_KEY = bs58.decode(PRIVATE_KEY_BASE58);
  const project_spl_authority = Keypair.fromSecretKey(PRIVATE_KEY);

  let usdtMint: PublicKey;
  let splMint: PublicKey;
  let userUsdtAccount: PublicKey;
  let userSplAccount: PublicKey;
  let escrowAccount: PublicKey;
  let projectSplAccount: PublicKey;

  const lamportsToPay = 1_000_000; // 1 SOL in lamports
  const solPriceInUsd = 25; // Example SOL price
  const connection = provider.connection;

  before(async () => {
    // Create USDT mint
    usdtMint = await createMint(
      connection,
      wallet,
      wallet.publicKey,
      null,
      6
    );

    // Create SPL token mint
    splMint = await createMint(
      connection,
      wallet,
      wallet.publicKey,
      null,
      6
    );

    // Create user USDT account
    userUsdtAccount = await createAccount(
      connection,
      wallet,
      usdtMint,
      wallet.publicKey
    );

    // Create user SPL token account
    userSplAccount = await createAccount(
      connection,
      wallet,
      splMint,
      wallet.publicKey
    );

    // Mint some USDT to user's account
    await mintTo(
      connection,
      wallet,
      usdtMint,
      userUsdtAccount,
      wallet.publicKey,
      100_000_000 // 100 USDT
    );

    // Create escrow account
    escrowAccount = await createAccount(
      connection,
      wallet,
      usdtMint,
      project_spl_authority.publicKey
    );

    // Create project SPL token account
    projectSplAccount = await createAccount(
      connection,
      wallet,
      splMint,
      project_spl_authority.publicKey
    );
  });

  // it("Buys SPL tokens with SOL", async () => {
  //   const tx = await program.methods
  //     .buySplWithSol(new anchor.BN(lamportsToPay), solPriceInUsd)
  //     .accounts({
  //       user: wallet.publicKey,
  //       projectSolAccount: wallet.publicKey,
  //       projectSplAta: projectSplAccount,
  //       projectSplAuthority: project_spl_authority.publicKey,
  //       userSplAta: userSplAccount,
  //       tokenProgram: TOKEN_PROGRAM_ID,
  //       systemProgram: SystemProgram.programId,
  //     })
  //     .signers([wallet])
  //     .rpc();

  //   console.log("Transaction signature:", tx);

  //   // Fetch the user's SPL token account balance
  //   const userSplAccountInfo = await connection.getParsedAccountInfo(
  //     userSplAccount
  //   );
  //   const balance = userSplAccountInfo.value?.data["parsed"]["info"]["tokenAmount"]["uiAmount"];
  //   console.log("User SPL Token Balance:", balance);

  //   // Validate balance increment (mocked with calculation)
  //   const expectedSplTokens = (lamportsToPay / 1e9) * solPriceInUsd / 0.02; // Assuming token price is $0.02
  //   assert.ok(balance >= expectedSplTokens, "SPL token balance mismatch");
  // });
});
